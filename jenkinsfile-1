pipeline {
    agent any

    environment {
        TAG = "first"
    }

    parameters {
        choice (name: 'SERVER', choices: ['ec2_dev', 'ec2_test', 'ec2_stage'], description: '''
        Select env for deploy
        ''')
    }

    stages {
        stage('Deploy ec2_dev'){
            when { expression { params.SERVER == 'ec2_dev' } }
            steps{
                script{
                    echo "Hello dev ${TAG}"
                    sh "java --version"
                    sh "pwd"
                    sh "curl -f -LI http://google.com"
                }

                withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'key_for_ansible', \
                                             keyFileVariable: 'key_for_ansible', \
                                             passphraseVariable: '', \
                                             usernameVariable: '')]) {
                    ansiblePlaybook(
                        playbook: 'var/lib/jenkins/workspace/ansible23/ansible/playbook3.yml',
                        inventory: 'var/lib/jenkins/workspace/ansible23/ansible/hosts.txt',
                        extraVars: [
                            server: 'ec2_dev'
                        ]
                    )
                }
            }
        }

        stage('Deploy ec2_test'){
            when { expression { params.SERVER == 'ec2_test' } }
            steps{
                script{
                    echo "hello test"
                    sh "cd /var/lib/jenkins/workspace/terraform"
                    sh "ls"
                }
                ansiblePlaybook(
                    playbook: 'var/lib/jenkins/workspace/ansible23/ansible/playbook3.yml',
                    inventory: 'var/lib/jenkins/workspace/ansible23/ansible/hosts.txt',
                    extraVars: [
                        server: 'ec2_test'
                    ]
                )
            }
        }

        stage('Ansible Playbook'){
            steps{
                sh 'ansible-playbook -vvvvv -i environments/teal_${ENVIRONMENT} playbooks/yourplaybook.yml -e --vault-password-file ./.vault_pass.txt'
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
